# Unique name for this workflow
name: Deployment Pipeline

# Definition when the workflow should run
on:
    push:
      branches: [sprint/**, develop, release/** ,master ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-Org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}

        env:
          SFDX_DEPLOYMENT_TYPE: ''
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                token: ${{ secrets.ACCESS_TOKEN }}
                fetch-depth: 0
                
            # Gets the branch name that the deployment is running on - this drives which org is the destination org     
            - name: Branch used
              id: extract_branch
              run: |
                if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
                    #echo "::set-output name=branch::$(echo  ${GITHUB_REF#refs/heads/})"
                    echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
                elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
                    #echo "::set-output name=branch::$(echo $GITHUB_BASE_REF)"
                    echo "branch=$(echo $GITHUB_BASE_REF)" >> $GITHUB_OUTPUT
                else
                    #echo "::set-output name=branch::INVALID_EVENT_BRANCH_UNKNOWN"
                    echo "branch=INVALID_EVENT_BRANCH_UNKNOWN" >> $GITHUB_OUTPUT
                fi


            # Populate auth file with SFDX_URL secret of test destination.
            - name: 'Populate auth file with SFDX_URL secret of release deployment destination'
              shell: bash            
              if: startsWith(steps.extract_branch.outputs.branch, 'sprint/')
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_TEST}} > ./SFDX_AUTH_URL.txt
                  echo "SFDX_DEPLOYMENT_TYPE=${{ vars.SFDX_DEPLOYMENT_TYPE_TEST }}" >> $GITHUB_ENV
               
            # Populate auth file with SFDX_URL secret of deployment destination.
            - name: 'Populate auth file with SFDX_URL secret of ST deployment destination'
              shell: bash
              if: ${{ steps.extract_branch.outputs.branch == 'develop' }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_ST}} > ./SFDX_AUTH_URL.txt
                  echo "SFDX_DEPLOYMENT_TYPE=${{ vars.SFDX_DEPLOYMENT_TYPE_SIT }}" >> $GITHUB_ENV
            
            # Populate auth file with SFDX_URL secret of release destination.
            - name: 'Populate auth file with SFDX_URL secret of release deployment destination'
              shell: bash            
              if: ${{ contains(steps.extract_branch.outputs.branch,'release/') }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_UAT}} > ./SFDX_AUTH_URL.txt
                  echo "SFDX_DEPLOYMENT_TYPE=${{ vars.SFDX_DEPLOYMENT_TYPE_UAT }}" >> $GITHUB_ENV
            
            # Populate auth file with SFDX_URL secret of prod destination.
            - name: 'Populate auth file with SFDX_URL secret of production deployment destination'
              shell: bash
              if: ${{ steps.extract_branch.outputs.branch == 'master' }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_PROD}} > ./SFDX_AUTH_URL.txt
                  echo "SFDX_DEPLOYMENT_TYPE=${{ vars.SFDX_DEPLOYMENT_TYPE_PROD }}" >> $GITHUB_ENV
            
            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times          
            - name: 'Create delta packages for new, modified or deleted metadata'
              if: ${{ env.SFDX_DEPLOYMENT_TYPE == 'DELTA' }}
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
                  
            # Create full package for entire branch deployment
            - name: 'Create full package for entire branch deployment'
              if: ${{ env.SFDX_DEPLOYMENT_TYPE == 'FULL' }}
              run: | 
                mkdir -p changed-sources
                mkdir -p changed-sources/package
                mkdir -p changed-sources/destructiveChanges
                mkdir -p delta-temp
                 
                cp -R force-app/ changed-sources/

    
                find force-app/main/default/ -name "*.xml" -type f -exec dirname {} \; | sort -u | xargs -I {} echo '<types><members>*</members><name>'{}'</name></types>' > changed-sources/package/package.xml
                echo '<version>59.0</version>' >> changed-sources/package/package.xml

                sfdx sgd:source:delta --to HEAD --from HEAD^ --output delta-temp/ --generate-delta --source force-app/

                # Move destructive changes to changed-sources/destructiveChanges
                mv delta-temp/destructiveChanges/* changed-sources/destructiveChanges/

                # Remove the temporary folder
                rm -rf delta-temp
            
            # Uploads a package.xml file of all the components that SFDX git delta has identified as created or modified 
            - name: 'Upload change sources file'
              if: success() || failure()
              uses: actions/upload-artifact@v3   
              with:
                name: Changed-Updated-Components
                path: changed-sources/package/package.xml
                if-no-files-found: warn # 'warn' or 'ignore' are also available, defaults to `warn`
            
            # Uploads a package.xml file of all the components that SFDX git delta has identified as deleted
            - name: 'Upload destructive source file'
              if: success() || failure()
              uses: actions/upload-artifact@v3   
              with:
                name: Deleted-Components
                path: changed-sources/destructiveChanges/destructiveChanges.xml
                if-no-files-found: warn # 'warn' or 'ignore' are also available, defaults to `warn`
                
            # Authenticate to org
            - name: 'Authenticate to deployment org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -s -a deployment
              
            # Performs a create/update deployment to the destination org 
            - name: 'Deploy the changes in branch to deployment destination'
              run: |
                if [ -d "changed-sources/force-app" ] && [ -n "$(ls -A changed-sources/force-app)" ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --testlevel RunLocalTests --json
                else
                    echo "No changes in the 'changed-sources' directory. Skipping deployment."
                fi   
              
            # Performs a destructive deployment to the destination org
            - name: 'Deploy destructive changes (if any) to deployment destination'
              run: |
                # Trigger the deployment
                result=$(sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --json)
                
                # Extract deployment ID
                deployId=$(echo $result | jq -r '.result.id')
                echo "Deployment ID: $deployId"
                
                # Check deployment status in a loop
                status="Queued"
                while [ "$status" == "Queued" ] || [ "$status" == "InProgress" ]; do
                    sleep 10
                    deploymentStatus=$(sfdx force:mdapi:deploy:report -i $deployId --json)
                    status=$(echo $deploymentStatus | jq -r '.result.status')
                    echo "Deployment Status: $status"
                done
            
                # Check if deployment was successful
                if [ "$status" != "Succeeded" ]; then
                    echo "Destructive changes deployment failed."
                    exit 1
                fi
