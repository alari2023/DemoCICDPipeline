# Unique name for this workflow
name: Validation pipeline

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      types: [opened, synchronize]
    
      branches: [develop, release/** ,master ]
    
      paths:
        - 'force-app/**'
## Allows the workflow to write to the pull request            
permissions: 
    pull-requests: write
    
# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '14'

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 



            ##Populate auth file with SFDX_URL secret of deployment destination.
            - name: 'Populate auth file with SFDX_URL secret of ST deployment destination'
              shell: bash
              if: ${{ github.event.pull_request.base.ref == 'develop' }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_DEMOST}} > ./SFDX_AUTH_URL.txt
            
            ##Populate auth file with SFDX_URL secret of release destination.
            - name: 'Populate auth file with SFDX_URL secret of release deployment destination'
              shell: bash            
              if: ${{ contains(github.event.pull_request.base.ref,'release/') }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_RELEASE}} > ./SFDX_AUTH_URL.txt
            
            ##Populate auth file with SFDX_URL secret of prod destination.
            - name: 'Populate auth file with SFDX_URL secret of production deployment destination'
              shell: bash
              if: ${{ github.event.pull_request.base.ref == 'master' }}
              run: |
                  echo ${{ secrets.SFDX_AUTH_URL_PROD}} > ./SFDX_AUTH_URL.txt
                  
            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to deployment org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -s -a deployment

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            - name: 'Setup PMD'
              uses: legetz/setup-pmd@7.0.0-rc3
              
            - name: 'Apex changes scan'
              if: ${{ hashFiles('changed-sources/force-app/main/default/classes/*.cls') != '' }}
              run: pmd check --dir changed-sources/force-app/main/default/classes/*.cls --rulesets ./pmd-rules.xml -f text -r ./pmdResults/pmdResult.sarif

            - uses: actions/upload-artifact@v3
              with:
                name: pmd-scan-report
                path: ./pmdResults/pmdResult.sarif
                 
            - name: 'No apex code scan'
              uses: actions/github-script@v6
              if: ${{ hashFiles('changed-sources/force-app/main/default/classes/*.cls') == '' }}
              with:
                  script: |
                    github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: 'No Apex code scan run'
                    })

            - name: 'Check-only deploy delta changes - run all tests'
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json
                  
            - name: 'Check-only deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings --json
